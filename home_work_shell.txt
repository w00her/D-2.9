python manage.py shell

from NewsPortal.models import *

// Создаем двух пользователей

user1 = User.objects.create_user('user1')
user2 = User.objects.create_user('user2')

>>> User.objects.all()
<QuerySet [<User: user1>, <User: user2>]>

// Создаем два объекта модели Author, связанные с пользователями

author1 = Author.objects.create(authorUser=user1)
author2 = Author.objects.create(authorUser=user2)

>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>

// Добавить 4 категории в модель Category

IT = Category.objects.create(name='IT')
SPORT = Category.objects.create(name='SPORT')
POLICY = Category.objects.create(name='POLICY')
TRANSPORT = Category.objects.create(name='TRANSPORT')

>>> Category.objects.all()
<QuerySet [<Category: Category object (1)>, <Category: Category object (2)>, <Category: Category object (3)>, <Category: Category object (4)>]>

// Добавить 2 статьи, 1 новость

article1 = Post.objects.create(author=author1, title = 'the first article title', text = 'first text in the article1')

article2 = Post.objects.create(author=author2, title = 'the second article title', text = 'second text in the article2')

news1 = Post.objects.create(author=author1, categoryType='NWS', title = 'the first news title', text = 'second text')

// Присваиваем им категории (как инимум в одной статье/новости должно быть не меньше 2 категорий)

article1.postCategory.add(IT)
article1.postCategory.add(SPORT)
acricle2.postCategory.add(IT)
acricle2.postCategory.add(POLICY)
news1.postCategory.add(SPORT)
news1.postCategory.add(TRANSPORT)

// Создаём как минимум 4 комментария к разным объеткам модели Post(в каждом объекте должне быть как минимум один комментарий)

artComment1 = Comment.objects.create(commentPost = article1, commentUser = user1, text = 'comment to article1')
artComment2 = Comment.objects.create(commentPost = article1, commentUser = user1, text = 'comment to article1')
artComment3 = Comment.objects.create(commentPost = article2, commentUser = user1, text = 'comment to article2')
artComment4 = Comment.objects.create(commentPost = article2, commentUser = user1, text = 'comment to article2')
newsComment1 = Comment.objects.create(commentPost = news1, commentUser = user2, text = 'comment to news1')
newsComment2 = Comment.objects.create(commentPost = news1, commentUser = user2, text = 'comment to news1')
newsComment3 = Comment.objects.create(commentPost = news1, commentUser = user2, text = 'comment to news1')


// Применяем функции like(), dislike() к статьям/новостям и комментариям. Корректируем рейтинги этих объектов.

article1.like()
article1.like()
article2.dislike()
article2.like()
news1.like()
news1.like()
news1.like()
artComment1.like()
artComment2.dislike()
artComment2.dislike() 
artComment3.like()
artComment3.like()
artComment3.like()
artComment4.dislike()
artComment4.dislike()
artComment4.dislike()
artComment4.dislike()
newsComment1.like()
newsComment2.dislike()
newsComment2.dislike()
newsComment3.like()
newsComment3.like()
newsComment3.like()
article1.rating
article2.rating
news1.rating

// Обновляем рейтинг пользователей

author1.update_rating()
author1.ratingAuthor
author2.update_rating()
author2.ratingAuthor

// Выводим имя и рейтинг лучшего пользоватлея (применяя сортировку и возвращая поля первого объекта)

Author.objects.order_by('-ratingAuthor')[0]

// Выводим дату добавления, имя автора, рейтинг, заголовок и превью лучшей статьи, основыыываясь на лайках/дизлайках к этой статье.

bestPost = Post.objects.order_by('-rating')[0]
bestPost.dateCreation
bestPost.author.authorUser
bestPost.rating
bestPost.title
bestPost.preview_temp

// Выводим все комментарии (дата, пользолватель, рейтинг, текст) к этой статье

comments = bestPost.comment_set.all()
for i in comments:
    i.dateCreation
	i.commentUser
	i.rating
	i.text